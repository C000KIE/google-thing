"""A video player class."""

from video_library import VideoLibrary
import random

playing = ""
pausing = 0
playlists = {}

class VideoPlayer:
    """A class used to represent a Video Player."""
    
    def __init__(self):
        self._video_library = VideoLibrary()

    def number_of_videos(self):
        num_videos = len(self._video_library.get_all_videos())
        print(f"{num_videos} videos in the library")

    def show_all_videos(self):
        print("Here's a list of all available videos:")
        all_vids = self._video_library.get_all_videos()
        all_vids.sort(key=lambda x: x.title)
        for i in range(len(all_vids)):
            these_tags = all_vids[i].tags
            tag_string = ""
            for j in range(len(these_tags)):
                if j!=0:
                    tag_string = tag_string + " "
                tag_string = tag_string + these_tags[j]
            print(all_vids[i].title + " (" + all_vids[i].video_id + ") [" + tag_string + "]")

    def play_video(self, video_id):
        global playing
        global pausing
        pausing = 0
        all_ids = list(ob.video_id for ob in self._video_library.get_all_videos())
        if video_id in all_ids:
            if playing == "":
                new_name = self._video_library.get_video(video_id)
                new_name = new_name.title
                print("Playing video: " + new_name)
                playing = new_name
            else:
                print("Stopping video: " + playing)
                new_name = self._video_library.get_video(video_id)
                new_name = new_name.title
                print("Playing video: " + new_name)
                playing = new_name
        else:
            print("Cannot play video: Video does not exist")

    def stop_video(self):
        global playing
        global pausing
        pausing = 0
        if playing == "":
            print("Cannot stop video: No video is currently playing")
        else:
            print("Stopping video: " + playing)
            playing = ""

    def play_random_video(self):
        global pausing
        pausing = 0
        rand_vid = random.choice(list(ob.video_id for ob in self._video_library.get_all_videos()))
        self.play_video(rand_vid)

    def pause_video(self):
        global playing
        global pausing
        if playing == "":
            print("Cannot pause video: No video is currently playing")
        else:
            if pausing == 0:
                print("Pausing video: " + playing)
                pausing = 1
            else:
                print("Video already paused: " + playing)

    def continue_video(self):
        global playing
        global pausing
        if playing == "":
            print("Cannot continue video: No video is currently playing")
        else:
            if pausing == 1:
                print("Continuing video: " + playing)
                pausing = 0
            else:
                print("Cannot continue video: Video is not paused")

    def show_playing(self):
        global playing
        global pausing
        if playing == "":
            print("No video is currently playing")
        else:
            end_line = ""
            if pausing == 1:
                end_line = " - PAUSED"
            body_line = next((x for x in self._video_library.get_all_videos() if x.title == playing), None)
            these_tags2 = body_line.tags
            tag_string2 = ""
            for j in range(len(these_tags2)):
                if j!=0:
                    tag_string2 = tag_string2 + " "
                tag_string2 = tag_string2 + these_tags2[j]
            print(body_line.title + " (" + body_line.video_id + ") [" + tag_string2 + "]" + end_line)

    def create_playlist(self, playlist_name):
        global playlists
        low_playlists = {}
        for i in playlists:
            low_playlists[i.lower()] = playlists[i]
        if playlist_name.lower() in low_playlists:
            print("Cannot create playlist: A playlist with the same name already exists")
        else:
            print("Successfully created new playlist: " + playlist_name)
            playlists[playlist_name] = []

    def add_to_playlist(self, playlist_name, video_id):
        global playlists
        low_playlists = {}
        for i in playlists:
            low_playlists[i.lower()] = playlists[i]
        if playlist_name.lower() in low_playlists:
            if video_id in low_playlists[playlist_name.lower()]:
                print("Cannot add video to " + playlist_name + ": Video already added")
            else:
                extra_vid = self._video_library.get_video(video_id)
                if extra_vid == None:
                    print("Cannot add video to " + playlist_name + ": Video does not exist")
                else:
                    print("Added video to " + playlist_name + ": " + extra_vid.title)
                    playlists[playlist_name].append(video_id)
        else:
            print("Cannot add video to " + playlist_name + ": Playlist already exists")

    def show_all_playlists(self):
        global playlists
        ordered = playlists.items()
        ordered = sorted(ordered)
        order_lists = []
        for el in ordered:
            order_lists.insert(0,el[0])
        if order_lists == []:
            print("No playlists exist yet")
        else:
            print("Showing all playlists:")
            for i in order_lists:
                print(i)

    def show_playlist(self, playlist_name):
        global playlists
        low_playlists = {}
        for i in playlists:
            low_playlists[i.lower()] = playlists[i]
        if playlist_name.lower() in low_playlists:
            print("Showing playlist: " + playlist_name)
            if len(low_playlists[playlist_name.lower()]) == 0:
                print("No videos here yet")
            else:
                for lis in low_playlists[playlist_name.lower()]:
                    these_tags = lis.tags
                    tag_string = ""
                    for j in range(len(these_tags)):
                        if j!=0:
                            tag_string = tag_string + " "
                            tag_string = tag_string + these_tags[j]
                            print(lis.title + " (" + lis.video_id + ") [" + tag_string + "]")
        else:
            print("Cannot show playlist " + playlist_name + ": Playlist does not exist yet")

    def remove_from_playlist(self, playlist_name, video_id):
        """Removes a video to a playlist with a given name.
        Args:
            playlist_name: The playlist name.
            video_id: The video_id to be removed.
        """
        print("remove_from_playlist needs implementation")

    def clear_playlist(self, playlist_name):
        """Removes all videos from a playlist with a given name.
        Args:
            playlist_name: The playlist name.
        """
        print("clears_playlist needs implementation")

    def delete_playlist(self, playlist_name):
        """Deletes a playlist with a given name.
        Args:
            playlist_name: The playlist name.
        """
        print("deletes_playlist needs implementation")

    def search_videos(self, search_term):
        """Display all the videos whose titles contain the search_term.
        Args:
            search_term: The query to be used in search.
        """
        print("search_videos needs implementation")

    def search_videos_tag(self, video_tag):
        """Display all videos whose tags contains the provided tag.
        Args:
            video_tag: The video tag to be used in search.
        """
        print("search_videos_tag needs implementation")

    def flag_video(self, video_id, flag_reason=""):
        """Mark a video as flagged.
        Args:
            video_id: The video_id to be flagged.
            flag_reason: Reason for flagging the video.
        """
        print("flag_video needs implementation")

    def allow_video(self, video_id):
        """Removes a flag from a video.
        Args:
            video_id: The video_id to be allowed again.
        """
        print("allow_video needs implementation")
